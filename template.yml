# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Basic template for API Gateway, DynamoDB Table

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Define common configuration
Globals:
  Function:
    Runtime: nodejs14.x
    Timeout: 180
    MemorySize: 128
    Environment:
      Variables:
        SAMPLE_TABLE: !Ref SampleTable
        GENERAL_TABLE: !Ref GeneralTable
        SILENT_LOG: true

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        # ApiKeyRequired: true
        # DefaultAuthorizer: CustomAuthorizer

        # Defining custom authorizer
        Authorizers:
          AgentAuthorizer:
            FunctionArn:
              Fn::GetAtt:
                - authAgentFunction
                - Arn
          CustomAuthorizer:
            FunctionArn:
              Fn::GetAtt:
                - authFunction
                - Arn
      Cors:
        AllowMethods: "'POST, GET, PUT, PATCH, DELETE'"
        # AllowCredentials: True
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Accept-Encoding,Connection,X-Business-Unit'"
        AllowOrigin: "'*'"
        MaxAge: "'1728000'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
              Headers:
                Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Accept-Encoding,Connection,X-Business-Unit'"
                Access-Control-Allow-Methods: "'POST, GET, PUT, PATCH, DELETE'"
                Access-Control-Allow-Origin: "'*'"
                # Access-Control-Allow-Credentials: True
        DEFAULT_5xx:
          ResponseParameters:
              Headers:
                Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Accept-Encoding,Connection,X-Business-Unit'"
                Access-Control-Allow-Methods: "'POST, GET, PUT, PATCH, DELETE'"
                Access-Control-Allow-Origin: "'*'"
                # Access-Control-Allow-Credentials: True

  cacheFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/cacher
      Handler: index.handler
      Description: Function for cache porpouse.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - DynamoDBCrudPolicy:
              TableName: !Ref GeneralTable
      #Events:
      #  CWEvent:
      #    Type: CloudWatchEvent
      #    Properties:
      #      Pattern:
      #        detail:
      #          state:
      #            - terminated

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  singlePointToMultipleEnpointFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/dynamic
      Handler: index.handler
      Description: Associate multiple endpoints of API.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - DynamoDBCrudPolicy:
              TableName: !Ref GeneralTable
      Events:
        GetQueues:
          Type: Api
          Properties:
            Path: /queues
            Method: GET
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true
              Authorizer: CustomAuthorizer
        GetEnvironments:
          Type: Api
          Properties:
            Path: /environment
            Method: POST
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true
        GetOtherMenu:
          Type: Api
          Properties:
            Path: /menu/{id}
            Method: GET
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true
              Authorizer: CustomAuthorizer
        GetMenu:
          Type: Api
          Properties:
            Path: /menu
            Method: GET
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true
              Authorizer: CustomAuthorizer
        GetCustomStyles:
          Type: Api
          Properties:
            Path: /styles
            Method: GET
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true
              Authorizer: CustomAuthorizer

  getAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/general
      Handler: get-all.handler
      Description: Is healthcheck endpoint.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - DynamoDBCrudPolicy:
              TableName: !Ref GeneralTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true
            #   Authorizer: 'NONE'

  # Custom authorizer
  authFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/key
      Handler: authorizer.handler
      Description: Auth middleware.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - DynamoDBCrudPolicy:
              TableName: !Ref GeneralTable

  authAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/agent
      Handler: authorizer.handler
      Description: Auth Agent middleware.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - DynamoDBCrudPolicy:
              TableName: !Ref GeneralTable

  # Dynamo Specification
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  
  GeneralTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
        - AttributeName: sid
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sid
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      # ProvisionedThroughput: 
      #   ReadCapacityUnits: 1
      #   WriteCapacityUnits: 1

  # Scaling specification
  ScalingRoleDynamo:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"

  ## Scaling for GeneralTable
  # WriteCapacityGeneralTableScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MaxCapacity: 40
  #     MinCapacity: 1
  #     ResourceId: !Join
  #       - /
  #       - - table
  #         - !Ref GeneralTable
  #     RoleARN: !GetAtt ScalingRoleDynamo.Arn
  #     ScalableDimension: dynamodb:table:WriteCapacityUnits
  #     ServiceNamespace: dynamodb
  
  # ReadCapacityGeneralTableScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MaxCapacity: 40
  #     MinCapacity: 1
  #     ResourceId: !Join
  #       - /
  #       - - table
  #         - !Ref GeneralTable
  #     RoleARN: !GetAtt ScalingRoleDynamo.Arn
  #     ScalableDimension: dynamodb:table:ReadCapacityUnits
  #     ServiceNamespace: dynamodb

  # WriteScalingGeneralTablePolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: WriteAutoScalingPolicy
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref WriteCapacityGeneralTableScalableTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       TargetValue: 80.0
  #       ScaleInCooldown: 60
  #       ScaleOutCooldown: 60
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: DynamoDBWriteCapacityUtilization
  
  # ReadScalingGeneralTablePolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: ReadAutoScalingPolicy
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref ReadCapacityGeneralTableScalableTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       TargetValue: 80.0
  #       ScaleInCooldown: 60
  #       ScaleOutCooldown: 60
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: DynamoDBReadCapacityUtilization

  ## Scaling for SampleTable
  WriteCapacitySampleTableScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 40
      MinCapacity: 1
      ResourceId: !Join
        - /
        - - table
          - !Ref SampleTable
      RoleARN: !GetAtt ScalingRoleDynamo.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  
  ReadCapacitySampleTableScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 40
      MinCapacity: 1
      ResourceId: !Join
        - /
        - - table
          - !Ref SampleTable
      RoleARN: !GetAtt ScalingRoleDynamo.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb

  WriteScalingSampleTablePolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacitySampleTableScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  
  ReadScalingSampleTablePolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ReadCapacitySampleTableScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
